BROWSERIFY = node_modules/.bin/browserify

.DEFAULT_GOAL := local
.PHONY : local requirements update-requirments update-osm-overlays update-gis-overlays

# Start a local development server at http://localhost:8000/
local : requirements update-osm-overlays update-gis-overlays static/bundle.js
	python3 -m http.server

# Install all npm and pip requirements necessary for development and updating static overlay data.
requirements : 
	npm ci
	pip install -r requirements.txt

# Update frozen pip and npm requirements.
update-requirments :
	pip install -r requirements-pip.txt
	pip-compile requirements.in
	npm install

# Update all static overlays derived from OpenStreetMap/Overpass queries.
update-osm-overlays : static/overlays/current_bike_infrastructure.geojson static/overlays/schools.geojson static/overlays/sexy_streets.geojson static/overlays/crashes.geojson
# Update all static overlays generated by local GIS scripts.
update-gis-overlays : static/overlays/crashes.geojson static/overlays/council_districts.geojson static/overlays/council_district_centers.geojson

# Prepare overlays which require special GIS processing.
static/overlays/crashes.geojson : raw_data/TIMS/Crashes.csv raw_data/TIMS/Victims.csv
	gis/crashes.py
static/overlays/council_districts.geojson static/overlays/council_district_centers.geojson : raw_data/Council_Districts.zip
	gis/districts.py

# Fetch and convert overlays that are just queried from OpenStreetMaps.
static/overlays/%.geojson : osm_queries/%.osm
	wget -O static/overlays/$(notdir $(basename $@)).osm --post-file=$< "https://overpass-api.de/api/interpreter"
	node_modules/.bin/osmtogeojson static/overlays/$(notdir $(basename $@)).osm >$@

# Generate the final javascript bundle containing all the main logic any any necessary JS libraries.
static/bundle.js: src/main.js $(shell $(BROWSERIFY) --list src/main.js)
	$(BROWSERIFY) $< > $@
